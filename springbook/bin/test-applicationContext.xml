<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
						http://www.springframework.org/schema/aop 
						http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context-3.0.xsd">
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
		<property name="driverClass" value="com.mysql.jdbc.Driver" />
		<property name="url"
			value="jdbc:mysql://localhost/springbook?characterEncoding=UTF-8" />
		<property name="username" value="spring" />
		<property name="password" value="book" />
	</bean>



	<!-- aop -->
	<!-- @Transactional이 붙은 타입과 메소드에 트랜잭션 부가기능을 담은 프록시를 추가하도록 만들어주는 후처리기 등록ㅂㅂ -->
	<tx:annotation-driven />

	<!-- 코드의 어노테이션을 이용해서 부가적인 빈 설정 또는 초기화 작업을 해주는 후처리기를 등록 -->
	<context:annotation-config />
	<!-- <aop:config> <aop:advisor advice-ref="transactionAdvice" pointcut="bean(*Service)" 
		/> </aop:config> <tx:advice id="transactionAdvice"> <tx:attributes> <tx:method 
		name="get*" read-only="true"/> <tx:method name="*" /> </tx:attributes> </tx:advice> -->

	<!-- <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" 
		/> <bean id="transactionAdvice" class="springbook.user.service.TransactionAdvice"> 
		<property name="transactionManager" ref="transactionManager" /> </bean> <bean 
		id="transactionPointcut" class="org.springframework.aop.aspectj.AspectJExpressionPointcut"> 
		<property name="expression" value="execution(* *..*ServiceImpl.upgrade*(..))" 
		/> </bean> <bean id="transactionAdvisor" class="org.springframework.aop.support.DefaultPointcutAdvisor"> 
		<property name="advice" ref="transactionAdvice" /> <property name="pointcut" 
		ref="transactionPointcut" /> </bean> -->

	<!-- application components -->
	<bean id="userDao" class="springbook.user.dao.UserDaoJdbc">
		<property name="dataSource" ref="dataSource" />
		<property name="sqlService" ref="sqlService" />
	</bean>

	<bean id="sqlService"
		class="springbook.user.sqlservice.XmlSqlService">
		<property name="sqlReader" ref="sqlService"/>
		<property name="sqlRegistry" ref="sqlService"/>
		<property name="sqlmapFile" value="sqlmap.xml" />
	</bean>
	
	<bean id="userService"
		class="springbook.user.service.UserServiceImpl">
		<property name="userDao" ref="userDao" />
		<property name="mailSender" ref="mailSender" />
	</bean>

	<bean id="testUserService"
		class="springbook.user.service.UserServiceTest$TestUserService"
		parent="userService" />

	<!-- <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl"> 
		<property name="host" value="mail.server.com" /> </bean> -->
	<bean id="mailSender"
		class="springbook.user.service.DummyMailSender" />
</beans>